Testeando en la nube
====================
:author: JJ Merelo
:email: jjmerelo@gmail.com
:description: Presentación para Barcelona Perl Workshop
:backend:   deckjs
:max-width: 50em
:data-uri:
:revnumber: 0.1
:deckjs_theme: swiss
:deckjs_transition: horizontal-slide
:icons:


Comprad el libro
----------------

[[libro_image]]
image::esquina.png[]

Un acercamiento a Perl desde la literatura
------------------------------------------

O de la literatura a DevOps pasando por Nueva York.

Y a la escritura de un link:https://www.amazon.es/dp/B00MRANX32?tag=atalaya-21&camp=3634&creative=24822&linkCode=as4&creativeASIN=B00MRANX32&adid=1YEB9QAF4PT2M7YPBPP5&[libro]
----------------------------

Bueno, de varios...

image::esquina.png[Portada del libro]


Escribir un libro es como desarrollar software
----------------------------------------------

[incremental="true"]
- Prepara tus herramientas
- Escribe
- Comprueba lo escrito
- Publica

O, dicho de otro modo
---------------------

[incremental="true"]
- Provisiona
- Código, código, código
- Test - integración continua
- Despliega

Cómo testear en la nube. 1. Añadir ficheros de test
---------------------------------------------------

[source,perl,numbered]
.test-hoborg.t
----
my $hoborg = new Text::Hoborg;
my $dir = $hoborg->dir();
diag( "Testing Text::Hoborg $Text::Hoborg::VERSION in $dir" );
$speller->add_dic("$dir/words.dic");
my @words = split /\s+/, $hoborg->text;
my $word_re = qr/([\w\'áéíóúÁÉÍÓÚñÑ]+)/;
for my $w (@words) {
  my ($stripped_word) = ( $w =~ $word_re );
  ok( $speller->check( $stripped_word), "Checking $stripped_word in text")   if ( $stripped_word ) ;
}
----

Un testeo pide integración continua
-----------------------------------

[source,txt,numbered]
.travis.yml

language: perl
perl:
  - "5.16"
before_install:
  - sudo apt-get install libhunspell-1.3-0 hunspell-en-us libhunspell-dev
  - cd Text-Hoborg
script: "perl Makefile.PL && make test"


2. Lo mismo, pero con Aspell
----------------------------

[source,perl,numbered]
.test-hashlash.t
----
use Text::Aspell;
BEGIN {
use_ok( 'Text::HashSlash' );
}
my $dict_dir;
my $speller = Text::Aspell->new;
die unless $speller;
$speller->set_option('lang','es');
my $hashslash = new Text::HashSlash;
my $dir = $hashslash->abs_dir();
diag( "Testing Text::HashSlash $Text::HashSlash::VERSION in $dir" );
$speller->set_option('personal',"$dir/.aspell.es.pws");
----

¿Por qué `Aspell`?
------------------

Error de codificación en el diccionario por omisión. Consulta al autor de `Text::Hunspell`, sin éxito.

¿Pero hace falta Perl?
---------------------

No:
[source,txt,numbered]
language: C
before_install:
  - sudo apt-get install aspell-es 
script: OUTPUT=`cat README.md | aspell list -d es -p ./.aspell.es.pws`; if [ -n "$OUTPUT" ]; then echo $OUTPUT; exit 1; fi

Muy alejado del parnaso
-----------------------

[incremental="true"]
- Demasiado raro.
- Sólo un fichero para comprobar.
- *Hacke-y*

NOTE: ¡No cuenta palabras!

Volvamos a Perl
---------------

WARNING: pero ahora lo haremos bien.
[incremental="true"]
- Un sólo módulo para cualquier tipo de texto.
- Número de palabras + errores + contexto de estos.
- Que funcione con los caracteres en castellano

Tiene que ser un módulo de Test
-------------------------------

`Test::Builder::Module` clase base para módulos de Test.

[source,perl]
my $tb= $CLASS->builder;
my $speller = $self->{'_speller'};
for my $f ( @{$self->files}) {
  my $file_content= read_file($f, binmode => ':utf8');
  my @words = ($file_content =~ m{\b(\p{L}+)\b}g); # gracias a SFANDINO
  for my $w (@words) {
    next if !$w;
    $tb->ok( $speller->check( $w),  "'$w'");
  }
}


Dos funciones básicas
---------------------

- `just_check( $dir, $dict_dir[, $language = "en_US"], @files )`;
- `done_testing`

Hum. No tan simple
------------------

[source,txt]
before_install:
  - sudo apt-get install libhunspell-1.3-0 libhunspell-dev
  - curl https://raw.githubusercontent.com/JJ/Test-Text/master/data/Spanish.aff -o Spanish.aff
  - curl https://raw.githubusercontent.com/SublimeText/Dictionaries/master/Spanish.dic -o Spanish.dic
install: cpanm Test::Text TAP::Harness
script: perl -MTAP::Harness -e 'use utf8; my $harness = TAP::Harness->new( { verbosity => 0} ); die "FAIL" if  $harness->runtests( "t/just_check.t" )->failed;'


El problema de los diccionarios
-------------------------------

- Mala codificación de los diccionarios por defecto de Hunspell
- Re-codificación del diccionario de afijos.

Pero ¡está en la nube!
----------------------
Dos ficheros

- `t/just_check.t`
[source,perl]
use Test::Text;
just_check( "text",".", "Spanish" );

- `.travis.yml`

NOTE: Podría ser sólo el segundo. 

Y, ¿para qué sirve todo esto?
-----------------------------

Para vender libros no. 

image::esquina.png[Portada del libro]

Las horas que son y todavía no he vendido ninguno hoy. Ni este mes. Ni el anterior.

Pero un texto es una aplicación muy simple
------------------------------------------

Y te hace pensar en la mínima cantidad de herramientas que necesitas para que _eche a andar_

NOTE: Y a parchear *upstream*, comprobarla periódicamente, definir el *despliegue* == publicación. 

Pero la lección más importante no es CI, ni _DevOps_, ni `Test::Builder::Module`
--------------------------------------------------------------------------------

Qué va

Hay que ser un *full-stack writer*
----------------------------------

Y también un *_full stack programmer_*

Sólo he venido a hablar de mi (próximo) libro
---------------------------------------------

*De cero a Perl en 66 píldoras* == Perl Moderno + DevOps + Ajo y Perejil.

http://github.com/JJ/cero_a_perl

Muchas gracias por vuestra atención
-----------------------------------

TIP: ¡No olviden reservar su plaza para YAPC::EU 2015 en Granada!

image::Batllo.png[Casa Batlló]

IMPORTANT: ¿Preguntas?


